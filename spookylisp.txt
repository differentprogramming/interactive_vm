(module spookyhash)

(const SC_NUMVARS i32 12)
(const SC_BLOCKSIZE i32 (* 8 SC_NUMVARS))
(const SC_BUFSIZE i32 (* 2 SC_BLOCKSIZE))

(define rot64 ((x u64) (k i32)) i64 inline
	(return (| (<< x k) (>> x (- 64 k))))
)


(struct spooky_state
	(m_data (array u64 (* 2 SC_NUMVARS)))
	(m_state (array u64 SC_NUMVARS))
	(m_length u64)
	(m_remainder i8)
)


(define hash ((a const string) (seed u64)) u64 inline
	(let str_len u64 (.call a size))
	(return (call spooky_hash (.call a str) str_len (^ (cast u64 strlen) seed)))
)

(define hash_string_with_seed ((a const (ptr i8)) (seed u64)) u64 inline
	(let str_len u64 (.call a size))
	(return (call spooky_hash64 (cast a (ptr ())) str_len (^ (cast u64 strlen) seed)))
)



// A C version of Bob Jenkins' spooky hash
// Spooky Hash
// A 128-bit noncryptographic hash, for checksums and table lookup
// By Bob Jenkins.  Public domain.
//
//   Oct 31 2010: published framework, disclaimer ShortHash isn't right
//   Nov  7 2010: disabled ShortHash
//   Oct 11 2011: C version ported by Andi Kleen (andikleen@github)
//   Oct 31 2011: replace End, ShortMix, ShortEnd, enable ShortHash again
//   Apr 10 2012: buffer overflow on platforms without unaligned reads
//   Apr 27 2012: C version updated by Ziga Zupanec 
//                ziga.zupanec@gmail.com (agiz@github)
//   Oct 05 2013: Adjusted to SpookyV2, better formatting 
//                by Arno Wagner arno@wagner.name
//
//   Assumes little endian ness. Caller has to check this.
//   Assumes 64bit architecture. 
//   'seed' values: Any value legal, including 0.



// SC_CONST: a constant which:
//  * is not zero
//  * is odd
//  * is a not-very-regular mix of 1's and 0's
//  * does not need any other special mathematical properties

(const SC_CONST u64 0xdeadbeefdeadbeef)


//
// endianess-test, returns 0 for big, 1 for little endian
//

(define is_little_endian () ? export
    (let i u32 0x11223344)
	(return (== (deref(take-addr (cast i (ptr u8)))) 0x44))
)
      

//
// This is used if the input is 96 bytes long or longer.
//
// The internal state is fully overwritten every 96 bytes.
// Every input bit appears to cause at least 128 bits of entropy
// before 96 other bytes are combined, when run forward or backward
//   For every input bit,
//   Two inputs differing in just that input bit
//   Where "differ" means xor or subtraction
//   And the base value is random
//   When run forward or backwards one Mix
// I tried 3 pairs of each// they all differed by at least 212 bits.
//

(define mix ((data const (ptr u64)) 
             (s0 (ptr u64)) 
             (s1 (ptr u64)) 
             (s2 (ptr u64)) 
             (s3 (ptr u64)) 
             (s4 (ptr u64)) 
             (s5 (ptr u64)) 
             (s6 (ptr u64)) 
             (s7 (ptr u64)) 
             (s8 (ptr u64)) 
             (s9 (ptr u64)) 
             (s10 (ptr u64)) 
             (s11 (ptr u64))) () inline
    (set += (deref s0) (deref data 0))
    (set ^= (deref s2) (deref s10))
	(set ^= (deref s11) (deref s0))
	(set (deref s0) (call rot64 (deref s0) 11))
	(set += (deref s11) (deref s1))
	(set += (deref s1) (deref data 1))
	(set ^= (deref s3) (deref s11))
	(set ^= (deref s0) (deref s1))
	(set (deref s1) (call rot64 (deref s1) 32))
	(set += (deref s0) (deref s2))
	(set += (deref s2) (deref data 2))
	(set ^= (deref s4) (deref s0))
	(set ^= (deref s1) (deref s2))
	(set (deref s2) (call rot64 (deref s2) 43))
	(set += (deref s1) (deref s3))
	(set += (deref s3) (deref data 3))
	(set ^= (deref s5) (deref s1))
	(set ^= (deref s2) (deref s3))
	(set (deref s3) (call rot64 (deref s3) 31))
	(set += (deref s2) (deref s4))
	(set += (deref s4) (deref data 4))
	(set ^= (deref s6) (deref s2))
	(set ^= (deref s3) (deref s4))
	(set (deref s4) (call rot64 (deref s4) 17))
    (set += (deref s3) (deref s5))
	(set += (deref s5) (deref data 5))
	(set ^= (deref s7) (deref s3))
	(set ^= (deref s4) (deref s5))
	(set (deref s5) (call rot64 (deref s5) 28))
	(set += (deref s4) (deref s6))
	(set += (deref s6) (deref data 6))
	(set ^= (deref s8) (deref s4))
	(set ^= (deref s5) (deref s6))
	(set (deref s6) (call rot64 (deref s6) 39))
	(set += (deref s5) (deref s7))
	(set += (deref s7) (deref data 7))
	(set ^= (deref s9) (deref s5))
	(set ^= (deref s6) (deref s7))
	(set (deref s7) (call rot64 (deref s7) 57))
	(set += (deref s6) (deref s8))
	(set += (deref s8) (deref data 8))
	(set ^= (deref s10) (deref s6))
	(set ^= (deref s7) (deref s8))
	(set (deref s8) (call rot64 (deref s8) 55))
	(set += (deref s7) (deref s9))
	(set += (deref s9) (deref data 9))
	(set ^= (deref s11) (deref s7))
	(set ^= (deref s8) (deref s9))
	(set (deref s9) (call rot64 (deref s9) 54))
	(set += (deref s8) (deref s10))
	(set += (deref s10) (deref data 10))
	(set ^= (deref s0) (deref s8))
	(set ^= (deref s9) (deref s10))
	(set (deref s10) (call rot64 (deref s10) 22))
	(set += (deref s9) (deref s11))
	(set += (deref s11) (deref data 11))
	(set ^= (deref s1) (deref s9))
	(set (deref s10) (^ (deref s10) (deref s11)))
	(set (deref s11) (call rot64 (deref s11) 46))
	(set (deref s10) (+ (deref s10) (deref s0)))
)
	
//
// Mix all 12 inputs together so that h0, h1 are a hash of them all.
//
// For two inputs differing in just the input bits
// Where "differ" means xor or subtraction
// And the base value is random, or a counting value starting at that bit
// The final result will have each bit of h0, h1 flip
// For every input bit,
// with probability 50 +- .3%
// For every pair of input bits,
// with probability 50 +- 3%
//
// This does not rely on the last Mix() call having already mixed some.
// Two iterations was almost good enough for a 64-bit result, but a
// 128-bit result is reported, so End() does three iterations.
//

(define endPartial ((h0 (ptr u64)) (h1 (ptr u64)) (h2 (ptr u64)) (h3 (ptr u64)) (h4 (ptr u64)) (h5 (ptr u64)) (h6 (ptr u64)) (h7 (ptr u64)) (h8 (ptr u64)) (h9 (ptr u64)) (h10 (ptr u64)) (h11 (ptr u64))) ()
(set (deref h11) (+ (deref h11) (deref h1)))
(set (deref h2) (^ (deref h2) (deref h11)))
(set (deref h1) (call rot64 (deref h1) 44))
(set (deref h0) (+ (deref h0) (deref h2)))
(set (deref h3) (^ (deref h3) (deref h0)))
(set (deref h2) (call rot64 (deref h2) 15))
(set (deref h1) (+ (deref h1) (deref h3)))
(set (deref h4) (^ (deref h4) (deref h1)))
(set (deref h3) (call rot64 (deref h3) 34))
(set (deref h2) (+ (deref h2) (deref h4)))
(set (deref h5) (^ (deref h5) (deref h2)))
(set (deref h4) (call rot64 (deref h4) 21))
(set (deref h3) (+ (deref h3) (deref h5)))
(set (deref h6) (^ (deref h6) (deref h3)))
(set (deref h5) (call rot64 (deref h5) 38))
(set (deref h4) (+ (deref h4) (deref h6)))
(set (deref h7) (^ (deref h7) (deref h4)))
(set (deref h6) (call rot64 (deref h6) 33))
(set (deref h5) (+ (deref h5) (deref h7)))
(set (deref h8) (^ (deref h8) (deref h5)))
(set (deref h7) (call rot64 (deref h7) 10))
(set (deref h6) (+ (deref h6) (deref h8)))
(set (deref h9) (^ (deref h9) (deref h6)))
(set (deref h8) (call rot64 (deref h8) 13))
(set (deref h7) (+ (deref h7) (deref h9)))
(set (deref h10) (^ (deref h10) (deref h7)))
(set (deref h9) (call rot64 (deref h9) 38))
(set (deref h8) (+ (deref h8) (deref h10)))
(set (deref h11) (^ (deref h11) (deref h8)))
(set (deref h10) (call rot64 (deref h10) 53))
(set (deref h9) (+ (deref h9) (deref h11)))
(set (deref h0) (^ (deref h0) (deref h9)))
(set (deref h11) (call rot64 (deref h11) 42))
(set (deref h10) (+ (deref h10) (deref h0)))
(set (deref h1) (^ (deref h1) (deref h10)))
(set (deref h0) (call rot64 (deref h0) 54))
)



(define end ((data const (ptr u64)) (h0 (ptr u64)) (h1 (ptr u64)) (h2 (ptr u64)) (h3 (ptr u64)) (h4 (ptr u64)) (h5 (ptr u64)) (h6 (ptr u64)) (h7 (ptr u64)) (h8 (ptr u64)) (h9 (ptr u64)) (h10 (ptr u64)) (h11 (ptr u64)))
            () inline
			(set (deref h0) (+ (deref h0) (deref data 0)))
			(set (deref h1) (+ (deref h1) (deref data 1)))
			(set (deref h2) (+ (deref h2) (deref data 2)))
			(set (deref h3) (+ (deref h3) (deref data 3)))
			(set (deref h4) (+ (deref h4) (deref data 4)))
			(set (deref h5) (+ (deref h5) (deref data 5)))
			(set (deref h6) (+ (deref h6) (deref data 6)))
			(set (deref h7) (+ (deref h7) (deref data 7)))
			(set (deref h8) (+ (deref h8) (deref data 8)))
			(set (deref h9) (+ (deref h9) (deref data 9)))
			(set (deref h10) (+ (deref h10) (deref data 10)))
			(set (deref h11) (+ (deref h11) (deref data 11)))
			(call endPartial h0 h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11)
			(call endPartial h0 h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11)
			(call endPartial h0 h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11)
)

//
// The goal is for each bit of the input to expand into 128 bits of
//   apparent entropy before it is fully overwritten.
// n trials both set and cleared at least m bits of h0 h1 h2 h3
//   n: 2   m: 29
//   n: 3   m: 46
//   n: 4   m: 57
//   n: 5   m: 107
//   n: 6   m: 146
//   n: 7   m: 152
// when run forwards or backwards
// for all 1-bit and 2-bit diffs
// with diffs defined by either xor or subtraction
// with a base of all zeros plus a counter, or plus another bit, or random
//


(define short_mix ((h0 (ptr u64)) (h1 (ptr u64)) (h2 (ptr u64)) (h3 (ptr u64)))
			() inline
		(set (deref h2) (call rot64 (deref h2) 50))
		(set (deref h2) (+ (deref h2) (deref h3)))
		(set (deref h0) (^ (deref h0) (deref h2)))
		(set (deref h3) (call rot64 (deref h3) 52))
		(set (deref h3) (+ (deref h3) (deref h0)))
		(set (deref h1) (^ (deref h1) (deref h3)))
		(set (deref h0) (call rot64 (deref h0) 30))
		(set (deref h0) (+ (deref h0) (deref h1)))
		(set (deref h2) (^ (deref h2) (deref h0)))
		(set (deref h1) (call rot64 (deref h1) 41))
		(set (deref h1) (+ (deref h1) (deref h2)))
		(set (deref h3) (^ (deref h3) (deref h1)))
		(set (deref h2) (call rot64 (deref h2) 54))
		(set (deref h2) (+ (deref h2) (deref h3)))
		(set (deref h0) (^ (deref h0) (deref h2)))
		(set (deref h3) (call rot64 (deref h3) 48))
		(set (deref h3) (+ (deref h3) (deref h0)))
		(set (deref h1) (^ (deref h1) (deref h3)))
		(set (deref h0) (call rot64 (deref h0) 38))
		(set (deref h0) (+ (deref h0) (deref h1)))
		(set (deref h2) (^ (deref h2) (deref h0)))
		(set (deref h1) (call rot64 (deref h1) 37))
		(set (deref h1) (+ (deref h1) (deref h2)))
		(set (deref h3) (^ (deref h3) (deref h1)))
		(set (deref h2) (call rot64 (deref h2) 62))
		(set (deref h2) (+ (deref h2) (deref h3)))
		(set (deref h0) (^ (deref h0) (deref h2)))
		(set (deref h3) (call rot64 (deref h3) 34))
		(set (deref h3) (+ (deref h3) (deref h0)))
		(set (deref h1) (^ (deref h1) (deref h3)))
		(set (deref h0) (call rot64 (deref h0) 5))
		(set (deref h0) (+ (deref h0) (deref h1)))
		(set (deref h2) (^ (deref h2) (deref h0)))
		(set (deref h1) (call rot64 (deref h1) 36))
		(set (deref h1) (+ (deref h1) (deref h2)))
		(set (deref h3) (^ (deref h3) (deref h1)))
	)
	

//
// Mix all 4 inputs together so that h0, h1 are a hash of them all.
//
// For two inputs differing in just the input bits
// Where "differ" means xor or subtraction
// And the base value is random, or a counting value starting at that bit
// The final result will have each bit of h0, h1 flip
// For every input bit,
// with probability 50 +- .3% (it is probably better than that)
// For every pair of input bits,
// with probability 50 +- .75% (the worst case is approximately that)
//

(define short_end ((h0 (ptr u64))(h1 (ptr u64)) (h2 (ptr u64)) (h3 (ptr u64))) () inline 
    (set (deref h3) (^ (deref h3) (deref h2)))
	(set (deref h2) (call rot64 (deref h2) 15))
	(set (deref h3) (+ (deref h3) (deref h2)))
	(set (deref h0) (^ (deref h0) (deref h3)))
	(set (deref h3) (call rot64 (deref h3) 52))
	(set (deref h0) (+ (deref h0) (deref h3)))
	(set (deref h1) (^ (deref h1) (deref h0)))
	(set (deref h0) (call rot64 (deref h0) 26))
	(set (deref h1) (+ (deref h1) (deref h0)))
	(set (deref h2) (^ (deref h2) (deref h1)))
	(set (deref h1) (call rot64 (deref h1) 51))
	(set (deref h2) (+ (deref h2) (deref h1)))
	(set (deref h3) (^ (deref h3) (deref h2)))
	(set (deref h2) (call rot64 (deref h2) 28))
	(set (deref h3) (+ (deref h3) (deref h2)))
	(set (deref h0) (^ (deref h0) (deref h3)))
	(set (deref h3) (call rot64 (deref h3) 9))
	(set (deref h0) (+ (deref h0) (deref h3)))
	(set (deref h1) (^ (deref h1) (deref h0)))
	(set (deref h0) (call rot64 (deref h0) 47))
	(set (deref h1) (+ (deref h1) (deref h0)))
	(set (deref h2) (^ (deref h2) (deref h1)))
	(set (deref h1) (call rot64 (deref h1) 54))
	(set (deref h2) (+ (deref h2) (deref h1)))
	(set (deref h3) (^ (deref h3) (deref h2)))
	(set (deref h2) (call rot64 (deref h2) 32))
	(set (deref h3) (+ (deref h3) (deref h2)))
	(set (deref h0) (^ (deref h0) (deref h3)))
	(set (deref h3) (call rot64 (deref h3) 25))
	(set (deref h0) (+ (deref h0) (deref h3)))
	(set (deref h1) (^ (deref h1) (deref h0)))
	(set (deref h0) (call rot64 (deref h0) 63))
	(set (deref h1) (+ (deref h1) (deref h0)))
)
//
// short hash ... it could be used on any message,
// but it's used by Spooky just for short messages.
//               


(define spooky_shorthash ((message const (ptr ()) (length u64) (hash2 (ptr u64)) (hash2 (ptr u64))) ()
   (let (buf (array u64 (* 2 SC_NUMVARS))))
   (let u (union (p8 const (ptr u8))(p32 (ptr u32))(p64 (ptr u64))(i u64)))

    (let remainder u64)
    (let (a u64) (b u64) (c u64) (d u64))
    (set (. u p8) (cast const (ptr u8) message))) 

    (cond ((and (not ALLOW_UNALIGNED_READS) 
                (!= 0 (& (. u i) 0x7))) 
           ((call memcpy buf message length)
            (set (. u p64) message))))
			
	(set remainder (% length 32))
	
	(set a (deref hash1))
	(set b (deref hash2))
	(set c SC_CONST)
	(set d SC_CONST)

	(cond ((> length 15)
	    	(let endp const (ptr u64) (+ (. u p64) (* (/ length 32) 4)))
		    (for () (< (. u p64) endp) (set (. u p64) (+ (. u p64) 4))
			    (set c (+ c (deref (. u p64))))
    			(set d (+ d (deref (. u p64 ) 1)))
	    		(call short_mix (get-addr a) (get-addr b) (get-addr c) (get-addr d))
		    	(set a (+ a (deref (. u p64) 2)))
			    (set b (+ b (deref (. u p64) 3)))
		    )
		    (cond ((> remainder 16)
			    (set c (+ c (deref (. u p64) 0)))
			    (set d (+ d (deref (. u p64) 1)))
			    (call short_mix (get-addr a) (get-addr b) (get-addr c) (get-addr d))
			    (set (. u p64) (+ (. u p64) 2))
			    (set remainder (- remainder 16))
		        )
		    )
	    )
	)
	
	
    // Handle the last 0..15 bytes, and its length

	(set d (+ d (<< (cast u64 length) 56)))
	(switch remainder
		(15 (set d (+ d (<< (cast u64 (deref (. u p8) 14)) 48)))
		    (fallthrough))
		(14 (set d (+ d (<< (cast u64 (deref (. u p8) 13)) 40)))
			(fallthrough))
		(13 (set d (+ d (<< (cast u64 (deref (. u p8) 12)) 32)))
			(fallthrough))
		(12 (set d (deref (. u p32) 2))
			(set c (+ c (deref (. u p64) 0))))
		(11 (set d (+ d (<< (cast u64 (deref (. u p8) 10)) 16)))
			(fallthrough))
		(10 (set d (+ d (<< (cast u64 (deref (. u p8) 9)) 8)))
			(fallthrough))
		(9 (set d (+ d (deref (. u p8) 8)))
			(fallthrough))
		(8 (set c (+ c (deref (. u p64) 0))))
		(7 (set c (+ c (<< (cast u64 (deref (. u p8) 6)) 48)))
			(fallthrough))
		(6 (set c (+ c (<< (cast u64 (deref (. u p8) 5)) 40)))
			(fallthrough))
		(5 (set c (+ c (<< (cast u64 (deref (. u p8) 4)) 32)))
			(fallthrough))
		(4 (set c (+ c (deref (. u p32) 0))))
		(3 (set c (+ c (<< (cast u64 (deref (. u p8) 2)) 16)))
			(fallthrough))
		(2 (set c (+ c (<< (cast u64 (deref (. u p8) 1)) 8)))
			(fallthrough))
		(1 (set c (+ c (deref (. u p8) 0))))
		(0 (set c (+ c SC_CONST))
			(set d (+ d SC_CONST)))
	)
	
		
	(call short_end (get-addr a) (get-addr b) (get-addr c) (get-addr d))
	(set (deref hash1) a)
	(set (deref hash2) b)
)


// init spooky state

(define spooky_init ((state (ptr spooky_state)) (seed1 u64) (seed2 u64)) ()
	(set (-> state m_length) 0)
	(set (-> state m_remainder) 0)
	(set (deref (-> state m_state) 0) seed1)
	(set (deref (-> state m_state) 1) seed2)
)

// add a message fragment to the state
(define spooky_update ((state (ptr spooky_state)) (message const (ptr ())) (length u64)) ()

	(let h0 u64) (let h1 u64) (let h2 u64) (let h3 u64) (let h4 u64) (let h5 u64) (let h6 u64) (let h7 u64) (let h8 u64) (let h9 u64) (let h10 u64) (let h11 u64)
	
	(let newLength u64 (+ length (-> state m_remainder)))
	
	(let remainder u8)
	
	(let u (union (p8 const (ptr u8))(p64 (ptr u64))(i u64)))
	
	(let endp const (ptr u64))

    // Is this message fragment too short?  If it is, stuff it away.
	(cond ((> newLength SC_BUFSIZE)
	        (call memcpy (deref (get-addr (cast (ptr u8)(-> state m_data))) (-> state m_remainder)) message length)
		    (set (-> state m_length) (+ length (-> state m_length)))
		    (set (-> state m_remainder) (cast u8 newLength))
		    (return)
	    )
	)

    // init the variables
	(cond ((< (-> state m_length) SC_BUFSIZE)
	        (set h0 (set h3 (set h6 (set h9 (deref (-> state m_state) 0)))))
		    (set h1 (set h4 (set h7 (set h10 (deref (-> state m_state) 1)))))
		    (set h2 (set h5 (set h8 (set h11 SC_CONST))))
	        )
		 (else (set h0 (deref (-> state m_state) 0))
		
		    (set h1 (deref (-> state m_state) 1))
		    (set h2 (deref (-> state m_state) 2))
		    (set h3 (deref (-> state m_state) 3))
		    (set h4 (deref (-> state m_state) 4))
		    (set h5 (deref (-> state m_state) 5))
		    (set h6 (deref (-> state m_state) 6))
		    (set h7 (deref (-> state m_state) 7))
		    (set h8 (deref (-> state m_state) 8))
		    (set h9 (deref (-> state m_state) 9))
		    (set h10 (deref (-> state m_state) 10))
		    (set h11 (deref (-> state m_state) 11))
		)
	)
	(set (-> state m_length) (+ length (-> state m_length)))
	
    // if we've got anything stuffed away, use it now
	(cond ((-> state m_remainder)
	        (let prefix u8 (- SC_BUFSIZE (-> state m_remainder)))
	        (call memcpy (deref (get-addr (cast (ptr u8)(-> state m_data))) (-> state m_remainder)) message prefix)
	        (set (. u p64) (-> state m_data))
	        (call mix (. u p64) (get-addr h0) (get-addr h1) (get-addr h2) (get-addr h3) (get-addr h4) (get-addr h5) (get-addr h6) (get-addr h7) (get-addr h8) (get-addr h9) (get-addr h10) (get-addr h11))
	        (call mix (get-addr (deref (. u p64) SC_NUMVARS)) (get-addr h0) (get-addr h1) (get-addr h2) (get-addr h3) (get-addr h4) (get-addr h5) (get-addr h6) (get-addr h7) (get-addr h8) (get-addr h9) (get-addr h10) (get-addr h11))
	        (set (. u p8) (+ (cast (ptr u8) message) prefix))
	        (set length (- length prefix))
		    )
		  (else (set (. u p8) (cast (ptr u8) message)))
	)
	
    // handle all whole blocks of SC_BLOCKSIZE bytes
	(set endp (+ (. u p64) (* (/ length SC_BLOCKSIZE) SC_NUMVARS)))
	
	(set remainder (cast u8 (- length (- (cast const (ptr u8) endp) (. u p8)))))
	
	(cond ((or ALLOW_UNALIGNED_READS (== (& (. u i) 0x7) 0))
	            (while (< (. u p64) endp)
			        (call mix (. u p64) (get-addr h0) (get-addr h1) (get-addr h2) (get-addr h3) (get-addr h4) (get-addr h5) (get-addr h6) (get-addr h7) (get-addr h8) (get-addr h9) (get-addr h10) (get-addr h11))
			        (set (. u p64) (+ (. u p64) SC_NUMVARS))
			    )
            )
		    (else (while (< (. u p64) endp)
		                (call memcpy (-> state m_data) (. u p8) SC_BLOCKSIZE)
						(call mix (-> state m_data) (get-addr h0) (get-addr h1) (get-addr h2) (get-addr h3) (get-addr h4) (get-addr h5) (get-addr h6) (get-addr h7) (get-addr h8) (get-addr h9) (get-addr h10) (get-addr h11))
						(set (. u p64) (+ (. u p64) SC_NUMVARS))
					)
			)
	)
	       
    // stuff away the last few bytes
	(set (-> state m_remainder) remainder)
	(call memcpy (-> state m_data) endp remainder)
	
    // stuff away the variables
	(set (deref (-> state m_state) 0) h0)
	(set (deref (-> state m_state) 1) h1)
	(set (deref (-> state m_state) 2) h2)
	(set (deref (-> state m_state) 3) h3)
	(set (deref (-> state m_state) 4) h4)
	(set (deref (-> state m_state) 5) h5)
	(set (deref (-> state m_state) 6) h6)
	(set (deref (-> state m_state) 7) h7)
	(set (deref (-> state m_state) 8) h8)
	(set (deref (-> state m_state) 9) h9)
	(set (deref (-> state m_state) 10) h10)
	(set (deref (-> state m_state) 11) h11)
)

// report the hash for the concatenation of all message fragments so far
(define spooky_final ((state (ptr spooky_state)) (hash1 (ptr u64)) (hash2 (ptr u64)))
	(let h0 u64 ) (let h1 u64) (let h2 u64) (let h3 u64) (let h4 u64) (let h5 u64) (let h6 u64) (let h7 u64) (let h8 u64) (let h9 u64) (let h10 u64) (let h11 u64)
	
	(let data (ptr u64) (cast const u64 (-> state m_data)))
	
	(let remainder u8 (-> state m_remainder))
	
	// init the variables
	(cond ((< (-> state m_length) SC_BUFSIZE)
			(call spooky_shorthash (-> state m_data) (-> state m_length) hash1 hash2)
			(return)
	    )
	)
	
	(set h0 (deref (-> state m_state) 0))
	(set h1 (deref (-> state m_state) 1))
	(set h2 (deref (-> state m_state) 2))
	(set h3 (deref (-> state m_state) 3))
	(set h4 (deref (-> state m_state) 4))
	(set h5 (deref (-> state m_state) 5))
	(set h6 (deref (-> state m_state) 6))
	(set h7 (deref (-> state m_state) 7))
	(set h8 (deref (-> state m_state) 8))
	(set h9 (deref (-> state m_state) 9))
	(set h10 (deref (-> state m_state) 10))
	(set h11 (deref (-> state m_state) 11))
	
	
	(cond ((>= remainder SC_BLOCKSIZE)
		    (call mix data (get-addr h0) (get-addr h1) (get-addr h2) (get-addr h3) (get-addr h4) (get-addr h5) (get-addr h6) (get-addr h7) (get-addr h8) (get-addr h9) (get-addr h10) (get-addr h11))
			(set data (+ data SC_NUMVARS))
			(set remainder (- remainder SC_BLOCKSIZE))
	    )
	)
	
	// mix in the last partial block, and the length mod SC_BLOCKSIZE
	(call memset (get-addr (deref (cast (ptr u8) data) remainder)) 0 (- SC_BLOCKSIZE remainder))
	
	(set (deref (cast (ptr u8) data) SC_BLOCKSIZE-1) remainder)

	// do some final mixing
	(call end data (get-addr h0) (get-addr h1) (get-addr h2) (get-addr h3) (get-addr h4) (get-addr h5) (get-addr h6) (get-addr h7) (get-addr h8) (get-addr h9) (get-addr h10) (get-addr h11))
	
	(set (deref hash1) h0)
	(set (deref hash2) h1)
)

// do the whole hash in one call
(define spooky_hash128 ((message const (ptr ())) (length u64) (hash1 (ptr u64)) (hash2 (ptr u64))) () export
	(let h0 u64 ) (let h1 u64) (let h2 u64) (let h3 u64) (let h4 u64) (let h5 u64) (let h6 u64) (let h7 u64) (let h8 u64) (let h9 u64) (let h10 u64) (let h11 u64)
	
	(let buf (array u64 SC_NUMVARS))
	(let endp (ptr u64))
	(let u (union (p8 const (ptr u8)) (p64 (ptr u64)) (i u64)))
	
	(let remainder u64)
	
	(cond ((< length SC_BUFSIZE)
			(call spooky_shorthash message length hash1 hash2)
			(return)
		)
	)
	
	(set h0 (set h3 (set h6 (set h9 (deref hash1)))))
	(set h1 (set h4 (set h7 (set h10 (deref hash2)))))
	(set h2 (set h5 (set h8 (set h11 SC_CONST))))

	(set (. u p8) (cast (ptr u8) message))
	(set endp (+ (. u p64) (* (/ length SC_BLOCKSIZE) SC_NUMVARS)))

    // handle all whole blocks of SC_BLOCKSIZE bytes
	(cond ((or ALLOW_UNALIGNED_READS (== (& (. u i) 7) 0))
		        (while (< (. u p64) endp)
			        (call memcpy (. u p64) (get-addr h0) (get-addr h1) (get-addr h2) (get-addr h3) (get-addr h4) (get-addr h5) (get-addr h6) (get-addr h7) (get-addr h8) (get-addr h9) (get-addr h10) (get-addr h11))
			        (set (. u p64) (+ (. u p64) SC_NUMVARS))
			    )
		    )
		(else 
		    (while (< (. u p64) endp)
			        (call memcpy buf (. u p64) SC_BLOCKSIZE)
					(call mix buf (get-addr h0) (get-addr h1) (get-addr h2) (get-addr h3) (get-addr h4) (get-addr h5) (get-addr h6) (get-addr h7) (get-addr h8) (get-addr h9) (get-addr h10) (get-addr h11))
					(set (. u p64) (+ (. u p64) SC_NUMVARS))
			)
		)
	)
		
    // handle the last partial block of SC_BLOCKSIZE bytes
	(set remainder (- length (- (cast const (ptr u8)) endp) (cast const (ptr u8)) message))
	
	(call memcpy buf endp remainder)
	(call memset (+ (cast (ptr u8)) buf remainder) 0 (- SC_BLOCKSIZE remainder))
	
	(set (deref (cast (ptr u8) buf) (SC_BLOCKSIZE-1)) remainder)
    // do some final mixing
	(call end buf (get-addr h0) (get-addr h1) (get-addr h2) (get-addr h3) (get-addr h4) (get-addr h5) (get-addr h6) (get-addr h7) (get-addr h8) (get-addr h9) (get-addr h10) (get-addr h11))
	
	(set (deref hash1) h0)
	(set (deref hash2) h1)
)

(define spooky_hash64 ((message const (ptr ())) (length u64) (seed u64)) u64 export
	(let hash1 u64 seed)
	(call spooky_hash128 message length (get-addr hash1) (get-addr seed))
	(return hash1)
)

(define spooky_hash32 ((message const (ptr ())) (length u64) (seed u32)) u32 export

	(let hash1 u64 seed)(let hash2 u64 seed)
	
	(call spooky_hash128 message length (get-addr hash1) (get-addr hash2))
	(return ((cast u32) hash1))
)
